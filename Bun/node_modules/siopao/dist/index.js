var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Siopao: () => Siopao,
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_radix3 = require("radix3");
var Siopao = class {
  router;
  constructor() {
    this.router = (0, import_radix3.createRouter)();
  }
  fetch(request) {
    const { pathname } = new URL(request.url);
    const matched = this.router.lookup(pathname);
    if (!matched) {
      return new Response("Not Found", {
        status: 404
      });
    }
    const methodMatched = matched.method === request.method || matched.method === "ALL";
    if (!methodMatched) {
      return new Response("Method Not Allowed", {
        status: 405
      });
    }
    request.params = matched.params || {};
    return matched.handler(request);
  }
  use(path, handler, method) {
    this.router.insert(path, {
      handler,
      method: method || "ALL"
    });
  }
  get(path, handler) {
    this.use(path, handler, "GET");
  }
  post(path, handler) {
    this.use(path, handler, "POST");
  }
  put(path, handler) {
    this.use(path, handler, "PUT");
  }
  patch(path, handler) {
    this.use(path, handler, "PATCH");
  }
  delete(path, handler) {
    this.use(path, handler, "DELETE");
  }
  serve(options = {}, cb) {
    const server = Bun.serve({
      ...options,
      fetch: (request) => this.fetch(request)
    });
    cb == null ? void 0 : cb();
    return server;
  }
};
var src_default = Siopao;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Siopao
});
